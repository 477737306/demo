<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cmit.testing.dao.TestCaseMapper">
  <resultMap id="BaseResultMap" type="com.cmit.testing.entity.TestCase">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="serial_number" jdbcType="VARCHAR" property="serialNumber" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="business_id" jdbcType="INTEGER" property="businessId" />
    <result column="script_id" jdbcType="INTEGER" property="scriptId" />
    <result column="retry" jdbcType="INTEGER" property="retry" />
    <result column="follow_id" jdbcType="VARCHAR" property="followId" />
    <result column="is_finish" jdbcType="INTEGER" property="isFinish" />
    <result column="information" jdbcType="VARCHAR" property="information" />
    <result column="is_record" jdbcType="INTEGER" property="isRecord" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="success_num" jdbcType="INTEGER" property="successNum" />
    <result column="failure_num" jdbcType="INTEGER" property="failureNum" />
    <result column="success_rate" jdbcType="DOUBLE" property="successRate" />
    <result column="code" jdbcType="INTEGER" property="code" />
    <result column="execution_type" jdbcType="INTEGER" property="executionType" />
    <result column="execution_date" jdbcType="VARCHAR" property="executionDate" />
    <result column="excute_num" jdbcType="INTEGER" property="excuteNum" />
    <result column="old_testcase_id" jdbcType="INTEGER" property="oldTestcaseId" />
    <result column="is_merge" jdbcType="INTEGER" property="isMerge" />
    <result column="merge_num" jdbcType="INTEGER" property="mergeNum" />
    <result column="sys_task_id" jdbcType="INTEGER" property="sysTaskId" />
    <result column="survey_task_id" jdbcType="INTEGER" property="surveyTaskId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, serial_number, name, business_id, script_id, retry, follow_id, is_finish, information,
    is_record, create_time, create_by, update_time, update_by, success_num, failure_num,
    success_rate, code, execution_type, execution_date, excute_num, old_testcase_id,
    is_merge, merge_num ,sys_task_id,survey_task_id,"web" as type
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    from testcase
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from testcase
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.cmit.testing.entity.TestCase" useGeneratedKeys="true" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into testcase (id, serial_number, name,
    business_id, script_id, retry,
    follow_id, is_finish, information,
    is_record, create_time, create_by,
    update_time, update_by, success_num,
    failure_num, success_rate, code,
    execution_type, execution_date, excute_num,
    old_testcase_id, is_merge, merge_num, sys_task_id,survey_task_id
    )
    values (#{id,jdbcType=INTEGER}, #{serialNumber,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
    #{businessId,jdbcType=INTEGER}, #{scriptId,jdbcType=INTEGER}, #{retry,jdbcType=INTEGER},
    #{followId,jdbcType=VARCHAR}, #{isFinish,jdbcType=INTEGER}, #{information,jdbcType=VARCHAR},
    #{isRecord,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR},
    #{updateTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}, #{successNum,jdbcType=INTEGER},
    #{failureNum,jdbcType=INTEGER}, #{successRate,jdbcType=DOUBLE}, #{code,jdbcType=INTEGER},
    #{executionType,jdbcType=INTEGER}, #{executionDate,jdbcType=VARCHAR}, #{excuteNum,jdbcType=INTEGER},
    #{oldTestcaseId,jdbcType=INTEGER}, #{isMerge,jdbcType=INTEGER}, #{mergeNum,jdbcType=INTEGER},
    #{sysTaskId,jdbcType=INTEGER},#{surveyTaskId,jdbcType=INTEGER}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.cmit.testing.entity.TestCase" useGeneratedKeys="true" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into testcase
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="serialNumber != null">
        serial_number,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="businessId != null">
        business_id,
      </if>
      <if test="scriptId != null">
        script_id,
      </if>
      <if test="retry != null">
        retry,
      </if>
      <if test="followId != null">
        follow_id,
      </if>
      <if test="isFinish != null">
        is_finish,
      </if>
      <if test="information != null">
        information,
      </if>
      <if test="isRecord != null">
        is_record,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="successNum != null">
        success_num,
      </if>
      <if test="failureNum != null">
        failure_num,
      </if>
      <if test="successRate != null">
        success_rate,
      </if>
      <if test="code != null">
        code,
      </if>
      <if test="executionType != null">
        execution_type,
      </if>
      <if test="executionDate != null">
        execution_date,
      </if>
      <if test="excuteNum != null">
        excute_num,
      </if>
      <if test="oldTestcaseId != null">
        old_testcase_id,
      </if>
      <if test="isMerge != null">
        is_merge,
      </if>
      <if test="mergeNum != null">
        merge_num,
      </if>
      <if test="sysTaskId != null">
        sys_task_id,
      </if>
      <if test="surveyTaskId!=null" >
        survey_task_id
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="serialNumber != null">
        #{serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="businessId != null">
        #{businessId,jdbcType=INTEGER},
      </if>
      <if test="scriptId != null">
        #{scriptId,jdbcType=INTEGER},
      </if>
      <if test="retry != null">
        #{retry,jdbcType=INTEGER},
      </if>
      <if test="followId != null">
        #{followId,jdbcType=VARCHAR},
      </if>
      <if test="isFinish != null">
        #{isFinish,jdbcType=INTEGER},
      </if>
      <if test="information != null">
        #{information,jdbcType=VARCHAR},
      </if>
      <if test="isRecord != null">
        #{isRecord,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="successNum != null">
        #{successNum,jdbcType=INTEGER},
      </if>
      <if test="failureNum != null">
        #{failureNum,jdbcType=INTEGER},
      </if>
      <if test="successRate != null">
        #{successRate,jdbcType=DOUBLE},
      </if>
      <if test="code != null">
        #{code,jdbcType=INTEGER},
      </if>
      <if test="executionType != null">
        #{executionType,jdbcType=INTEGER},
      </if>
      <if test="executionDate != null">
        #{executionDate,jdbcType=VARCHAR},
      </if>
      <if test="excuteNum != null">
        #{excuteNum,jdbcType=INTEGER},
      </if>
      <if test="oldTestcaseId != null">
        #{oldTestcaseId,jdbcType=INTEGER},
      </if>
      <if test="isMerge != null">
        #{isMerge,jdbcType=INTEGER},
      </if>
      <if test="mergeNum != null">
        #{mergeNum,jdbcType=INTEGER},
      </if>
      <if test="sysTaskId != null">
        #{sysTaskId,jdbcType=INTEGER},
      </if>
      <if test="surveyTaskId!=null" >
        #{surveyTaskId,jdbcType=INTEGER}
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cmit.testing.entity.TestCase">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update testcase
    <set>
      <if test="serialNumber != null">
        serial_number = #{serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="businessId != null">
        business_id = #{businessId,jdbcType=INTEGER},
      </if>
      <if test="scriptId != null">
        script_id = #{scriptId,jdbcType=INTEGER},
      </if>
      <if test="retry != null">
        retry = #{retry,jdbcType=INTEGER},
      </if>
      <if test="followId != null">
        follow_id = #{followId,jdbcType=VARCHAR},
      </if>
      <if test="isFinish != null">
        is_finish = #{isFinish,jdbcType=INTEGER},
      </if>
      <if test="information != null">
        information = #{information,jdbcType=VARCHAR},
      </if>
      <if test="isRecord != null">
        is_record = #{isRecord,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="successNum != null">
        success_num = #{successNum,jdbcType=INTEGER},
      </if>
      <if test="failureNum != null">
        failure_num = #{failureNum,jdbcType=INTEGER},
      </if>
      <if test="successRate != null">
        success_rate = #{successRate,jdbcType=DOUBLE},
      </if>
      <if test="code != null">
        code = #{code,jdbcType=INTEGER},
      </if>
      <if test="executionType != null">
        execution_type = #{executionType,jdbcType=INTEGER},
      </if>
      <if test="executionDate != null">
        execution_date = #{executionDate,jdbcType=VARCHAR},
      </if>
      <if test="excuteNum != null">
        excute_num = #{excuteNum,jdbcType=INTEGER},
      </if>
      <if test="oldTestcaseId != null">
        old_testcase_id = #{oldTestcaseId,jdbcType=INTEGER},
      </if>
      <if test="isMerge != null">
        is_merge = #{isMerge,jdbcType=INTEGER},
      </if>
      <if test="mergeNum != null">
        merge_num = #{mergeNum,jdbcType=INTEGER},
      </if>
      <if test="sysTaskId != null">
        sys_task_id = #{sysTaskId,jdbcType=INTEGER},
      </if>
      <if test="surveyTaskId != null">
        survey_task_id =#{surveyTaskId,jdbcType=INTEGER},
      </if>

    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cmit.testing.entity.TestCase">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update testcase
    set serial_number = #{serialNumber,jdbcType=VARCHAR},
    name = #{name,jdbcType=VARCHAR},
    business_id = #{businessId,jdbcType=INTEGER},
    script_id = #{scriptId,jdbcType=INTEGER},
    retry = #{retry,jdbcType=INTEGER},
    follow_id = #{followId,jdbcType=VARCHAR},
    is_finish = #{isFinish,jdbcType=INTEGER},
    information = #{information,jdbcType=VARCHAR},
    is_record = #{isRecord,jdbcType=INTEGER},
    create_time = #{createTime,jdbcType=TIMESTAMP},
    create_by = #{createBy,jdbcType=VARCHAR},
    update_time = #{updateTime,jdbcType=TIMESTAMP},
    update_by = #{updateBy,jdbcType=VARCHAR},
    success_num = #{successNum,jdbcType=INTEGER},
    failure_num = #{failureNum,jdbcType=INTEGER},
    success_rate = #{successRate,jdbcType=DOUBLE},
    code = #{code,jdbcType=INTEGER},
    execution_type = #{executionType,jdbcType=INTEGER},
    execution_date = #{executionDate,jdbcType=VARCHAR},
    excute_num = #{excuteNum,jdbcType=INTEGER},
    old_testcase_id = #{oldTestcaseId,jdbcType=INTEGER},
    is_merge = #{isMerge,jdbcType=INTEGER},
    merge_num = #{mergeNum,jdbcType=INTEGER},
    sys_task_id = #{sysTaskId,jdbcType=INTEGER},
    survey_task_id =#{surveyTaskId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findByPage" resultType="com.cmit.testing.entity.vo.PbtVO">
    select
    a.id,a.NAME,a.success_num AS successNum ,a.failure_num AS failureNum,a.success_rate AS successRate,a.update_time AS updateTime,a.create_time AS createTime,
    a.code AS  code ,"case" AS tableFlag,a.is_finish AS isFinish,b.id AS menuId
    FROM
    testcase a LEFT JOIN sys_permission b ON a.id = b.data_id
    WHERE  b.type= "case" AND business_id = #{businessId,jdbcType=INTEGER} AND old_testcase_id = 0
    <if test="name != null and name != ''">
      AND a.name LIKE CONCAT('%', #{name}, '%')
    </if>
    UNION
    SELECT
    a.case_id AS id,
    a.case_name AS name,
    a.success_count AS successNum,
    a.failure_count AS failureNum,
    a.success_rate AS successRate,
    a.update_time AS updateTime,
    a.create_time AS createTime,
    a.order_code AS CODE,
    "appCase" AS tableFlag,
    a.is_finish AS isFinish,
    b.id AS menuId
    FROM
    app_case AS a
    LEFT JOIN sys_permission b ON a.case_id = b.data_id
    WHERE
    b.type= "appCase"
    AND business_id = #{businessId,jdbcType=INTEGER}
    AND old_case_id = 0
    <if test="name != null and name != ''">
      AND a.case_name LIKE CONCAT('%', #{name}, '%')
    </if>
    ORDER BY field(tableFlag,'case','appCase'),code,name,createTime asc

  </select>

  <select id="getListByTestCase" parameterType="com.cmit.testing.entity.TestCase" resultMap="BaseResultMap">
    select a.*,b.name As businessName,b.sys_task_id AS bSysTaskId,"web" AS type
    from testcase a
     JOIN business b  ON a.business_id= b.id     where       1=1
    <if test="serialNumber != null and  serialNumber != ''">
      and a.serial_number = #{serialNumber,jdbcType=VARCHAR}
    </if>
    <if test="name != null  and  name != ''">
      and a.name LIKE CONCAT('%', #{name}, '%')
    </if>
    <if test="businessId != null">
      and  a.business_id = #{businessId,jdbcType=INTEGER}
    </if>
    <if test="scriptId != null">
      and a.script_id = #{scriptId,jdbcType=INTEGER}
    </if>
    <if test="retry != null">
      and a.retry = #{retry,jdbcType=INTEGER}
    </if>
    <if test="isMerge != null">
      and a.is_merge = #{isMerge,jdbcType=INTEGER}
    </if>
    <if test="excuteNum != null">
      and a.excute_num = #{excuteNum,jdbcType=INTEGER}
    </if>
    <if test="mergeNum != null">
      and a.is_merge = #{mergeNum,jdbcType=INTEGER}
    </if>
    <if test="followId != null">
      and a.follow_id = #{followId,jdbcType=VARCHAR}
    </if>
    <if test="oldTestcaseId != null">
      and a.old_testcase_id = #{oldTestcaseId,jdbcType=INTEGER}
    </if>
    <if test="isFinish != null">
      and  a.is_finish = #{isFinish,jdbcType=INTEGER}
    </if>

    <if test="unequalFinshs!=null and unequalFinshs.size >0">
      AND a.is_finish NOT IN
      <foreach close=")" collection="unequalFinshs" item="unequalFinsh" open="(" separator=",">
        #{unequalFinsh,jdbcType=INTEGER}
      </foreach>
    </if>

    <if test="information != null and information != ''">
      and a.information = #{information,jdbcType=VARCHAR}
    </if>
    <if test="isRecord != null">
      and a.is_record = #{isRecord,jdbcType=INTEGER}
    </if>
    <if test="createTime != null and createTime!=''">
      and a.create_time = #{createTime,jdbcType=TIMESTAMP}
    </if>
    <if test="createBy != null and createBy!=''">
      and a.create_by  LIKE CONCAT('%', #{create_by}, '%')
    </if>
    <if test="updateTime != null and updateTime!= ''">
      and a.update_time = #{updateTime,jdbcType=TIMESTAMP}
    </if>
    <if test="updateBy != null and updateBy!=''">
      and a.update_by = LIKE CONCAT('%', #{update_by}, '%')
    </if>
    <if test="successNum != null">
      and a.success_num = #{successNum,jdbcType=INTEGER}
    </if>
    <if test="failureNum != null">
      and a.failure_num = #{failureNum,jdbcType=INTEGER}
    </if>
    <if test="successRate != null">
      and a.success_rate = #{successRate,jdbcType=DOUBLE}
    </if>
    <if test="code != null">
      and a.code = #{code,jdbcType=INTEGER}
    </if>
    <if test="executionType != null">
      and a.execution_type = #{executionType,jdbcType=INTEGER}
    </if>
    <if test="executionDate != null and executionDate!= ''">
      and a.execution_date = #{executionDate,jdbcType=VARCHAR}
    </if>
  </select>
  <select id="getIdsByOldIds" resultType="java.lang.Integer">
  select
    id
  from testcase
    WHERE old_testcase_id IN
    <foreach close=")" collection="ids" item="id" open="(" separator=",">
      #{id,jdbcType=INTEGER}
    </foreach>
  </select>

  <select id="getTestCaseByIds" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select <include refid="Base_Column_List" />
    from testcase
    WHERE id IN
    <foreach close=")" collection="ids" item="id" open="(" separator=",">
      #{id,jdbcType=INTEGER}
    </foreach>
  </select>


  <select id="getIdsByFollowId" resultType="java.lang.Integer">
    select id from (select
    id , substring_index(REPLACE(follow_id,'{"web":[',''),'],"app":',1) follow_id
    from testcase
    WHERE old_testcase_id = 0 ) a  where
    <if test="ids !=null and ids.size >0 ">
      <foreach close=")" collection="ids" item="id" open="(" separator="or">
        follow_id like concat('%',#{id,jdbcType=INTEGER},'%')
      </foreach>
    </if>
    <if test="ids ==null or ids.size ==0">
      1=2
    </if>
  </select>

  <select id="getTestCaseByExeType"   resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from testcase
    WHERE old_testcase_id = 0 AND is_finish != 1
    <if test="executionType != null">
      and execution_type = #{executionType,jdbcType=INTEGER}
    </if>
  </select>

  <delete id="deleteByIds" parameterType="java.lang.Integer">
    delete from testcase
    where id IN
    <foreach close=")" collection="ids" item="id" open="(" separator=",">
      #{id,jdbcType=INTEGER}
    </foreach>
    OR old_testcase_id IN
    <foreach close=")" collection="ids" item="id" open="(" separator=",">
      #{id,jdbcType=INTEGER}
    </foreach>
  </delete>


  <!--用例数据统计（casenum：用例总数，noexecute：未执行，executing：执行中，executed：已执行-->
  <select id="testCaseCount" resultType="java.util.Map">
    SELECT
      count(0) AS casenum,
      count(IF(is_finish = 0, TRUE, NULL)) AS noexecute,
      count(IF(is_finish = 1, TRUE, NULL)) AS executing,
      count(IF(is_finish = 2, TRUE, NULL)) AS executed
    FROM
      testcase WHERE old_testcase_id = 0
  </select>

  <!--统计业务下用例的成功数与失败数-->
  <select id="testCaseCountNumber" resultType="java.util.Map">
    SELECT
      count( IF ( success_rate = 1, TRUE, NULL ) ) AS successNum,
      count( IF ( success_rate != 1, TRUE, NULL ) ) AS failureNum
    FROM
      testcase
    WHERE
      old_testcase_id = 0
      AND is_finish =0
      AND business_id = #{businessId}
  </select>

  <select id="getExecutingCountByBusiness" resultType="java.lang.Integer">
    SELECT
          count(id)
    FROM
      testcase
    WHERE
      old_testcase_id = 0
      AND is_finish =1
      AND business_id = #{businessId}
  </select>

  <select id="getTestCaseMaxExcuteNum" parameterType="java.lang.Integer" resultType="java.util.Map">
    SELECT Max(excute_num) as maxnum from testcase where old_testcase_id = #{id}
  </select>

  <select id="getTestCaseByTaskId" resultMap="BaseResultMap">
    select  <include refid="Base_Column_List" />
    from testcase where sys_task_id = #{id}
  </select>
  
  <select id="selectTastCaseTive" parameterType="com.cmit.testing.entity.TestCase"  resultMap="BaseResultMap"   >
  	select <include refid="Base_Column_List" /> 
  	from testcase
  	where old_testcase_id = '0'
  	<if test="businessId != null">
  		and  business_id = #{businessId,jdbcType=INTEGER}
  	</if>
  	<if test="excuteNum != null">
  		and  execute_Num = #{excute_num,jdbcType=INTEGER}
  	</if>
  </select>

  <select id="getExcuteNumById"  resultType="java.lang.Long">
    select DISTINCT (excute_num) AS excuteNum
    from testcase WHERE excute_num != 0
    <if test="id != null">
      and old_testcase_id = #{id,jdbcType=INTEGER}
    </if>
    ORDER BY excute_num DESC
  </select>

  <select id="getTestCaseByCaseId"  resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from testcase WHERE old_testcase_id = #{id}
    order by excute_num desc LIMIT 1
  </select>

  <select id="getTestCaseBySurTaskIdAndCaseId"  resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from testcase WHERE old_testcase_id = #{id}
    and survey_task_id = #{surveyTaskId}
  </select>
  
  <select id="getMaxExcuteNum" resultType="java.lang.Integer">

    SELECT SUM(a.maxexnum) FROM (SELECT DISTINCT t.serial_number ,MAX(t.excute_num) maxexnum FROM
    testcase t GROUP BY t.serial_number HAVING maxexnum >0) a
  </select>

  <select id="getAllExecutingCase" resultType="com.cmit.testing.entity.vo.ExecutingCaseVO" parameterType="com.cmit.testing.entity.vo.TestCaseReportVO">
    SELECT
      t.id AS testcastId,
      "WEB" AS type,
      t.name AS testcasName,
      t.serial_number AS serialNumber,
      t.business_id AS businessId,
      t.excute_num AS excuteNum,
      t.create_by AS executorName,
      tr.is_finish AS isFinish,
      tr.phone_num AS phoneNum,
      tr.create_time AS executionDate,
      tr.excute_result AS excuteResult,
      sr.province AS province,
      bs.name AS businessName,
      ms.name AS scriptName,
      b.name AS projectName
    FROM testcase_report tr
      LEFT JOIN testcase t ON t.id = tr.testcast_id
      LEFT JOIN model_script ms ON ms.id = t.script_id
      LEFT JOIN sim_card sr ON sr.phone = tr.phone_num
      LEFT JOIN (SELECT serial_number,business_id FROM testcase WHERE old_testcase_id = '0') bsn ON bsn.serial_number = t.serial_number
      LEFT JOIN business bs ON bs.id = bsn.business_id
      LEFT JOIN project b ON b.id = bs.project_id
	<where>
      1 = 1
      <if test="testcastName != null and testcastName != ''">
        AND t.name = #{testcastName}
      </if>

      <if test="isFinish != null and isFinish != ''">
        AND tr.is_finish = #{isFinish}
      </if>

      <if test="excuteNum != null">
        AND t.excute_num = #{excuteNum}
      </if>

      <if test="province != null and province != ''">
        AND sr.province = #{province}
      </if>

      <if test="excuteResult != null">
        AND r.excute_result = #{excuteResult}
      </if>

      <if test="serialNumber != null and serialNumber != ''">
        AND t.serial_number = #{serialNumber}
      </if>
        AND tr.is_finish = '1'
        AND t.old_testcase_id != '0'
    </where>
  </select>

  <select id="getSerialNumber" resultType="java.lang.Integer">
    SELECT t.id
    FROM business b,testcase t
    WHERE t.old_testcase_id = 0
	AND b.id = t.business_id
	AND b.project_id = #{projectId}
	AND t.serial_number = #{serialNumber}
    <if test="id != null">
        AND t.id != #{id}
    </if>
  </select>

  <update id="batchUpdateTestCase" parameterType="java.util.List">
    update testcase
    set follow_id =
    <foreach collection="list" item="item" index="index"
             separator=" " open="case ID" close="end">
      when #{item.id} then #{item.followId}
    </foreach>
    where id in
    <foreach collection="list" index="index" item="item"
             separator="," open="(" close=")">
      #{item.id}
    </foreach>
  </update>

  <!-- 根据原用例id和任务id获取用例副本 -->
  <select id="getTestCasesByOldTestcaseIdAndSysTaskId"  resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from testcase where old_testcase_id = #{oldTestcaseId} and sys_task_id = #{sysTaskId};
  </select>
</mapper>