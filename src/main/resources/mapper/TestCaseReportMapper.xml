<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cmit.testing.dao.TestCaseReportMapper" >
  <resultMap id="BaseResultMap" type="com.cmit.testing.entity.TestCaseReport" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="testcast_id" property="testcastId" jdbcType="INTEGER" />
    <result column="old_testcase_id" property="oldTestcaseId" jdbcType="INTEGER" />
    <result column="phone_num" property="phoneNum" jdbcType="VARCHAR" />
    <result column="province" property="province" jdbcType="VARCHAR" />
    <result column="excute_num" property="excuteNum" jdbcType="INTEGER" />
    <result column="log" property="log" jdbcType="VARCHAR" />
    <result column="is_finish" property="isFinish" jdbcType="INTEGER" />
    <result column="excute_result" property="excuteResult" jdbcType="INTEGER" />
    <result column="pass_status" property="passStatus" jdbcType="INTEGER" />
    <result column="defect_description" property="defectDescription" jdbcType="VARCHAR" />
    <result column="snapshot_location" property="snapshotLocation" jdbcType="VARCHAR" />
    <result column="video_location" property="videoLocation" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_by" property="createBy" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="VARCHAR" />
    <result column="validate_time" property="validateTime" jdbcType="DOUBLE" />
    <result column="click_num" property="clickNum" jdbcType="INTEGER" />
    <result column="input_num" property="inputNum" jdbcType="INTEGER" />
    <result column="consume_time" property="consumeTime" jdbcType="DOUBLE" />
    <result column="execute_host" property="executeHost" jdbcType="VARCHAR" />

  </resultMap>
  <sql id="Base_Column_List" >
    id, testcast_id, old_testcase_id, phone_num, province, excute_num, log, is_finish, excute_result, 
    pass_status, defect_description, snapshot_location, video_location, create_time, 
    create_by, update_time, update_by, validate_time,click_num,input_num,consume_time,execute_host
  </sql>
  <sql id="Base_Column_List_b" >
    b.id, b.testcast_id, b.old_testcase_id, b.phone_num, b.province, b.excute_num, b.log, b.is_finish, b.excute_result,
    b.pass_status, b.defect_description, b.snapshot_location, b.video_location, b.create_time,
    b.create_by, b.update_time, b.update_by, b.validate_time,b.click_num,b.input_num,b.consume_time,b.execute_host
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from testcase_report
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from testcase_report
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.cmit.testing.entity.TestCaseReport" useGeneratedKeys="true" keyProperty="id">
    insert into testcase_report (id, testcast_id, old_testcase_id, phone_num, 
      province, excute_num, log, 
      is_finish, excute_result, pass_status, 
      defect_description, snapshot_location, video_location, 
      create_time, create_by, update_time, 
      update_by, validate_time,click_num,input_num,consume_time,execute_host)
    values (#{id,jdbcType=INTEGER}, #{testcastId,jdbcType=INTEGER}, #{oldTestcaseId,jdbcType=INTEGER}, #{phoneNum,jdbcType=VARCHAR}, 
      #{province,jdbcType=VARCHAR}, #{excuteNum,jdbcType=INTEGER}, #{log,jdbcType=VARCHAR}, 
      #{isFinish,jdbcType=INTEGER}, #{excuteResult,jdbcType=INTEGER}, #{passStatus,jdbcType=INTEGER}, 
      #{defectDescription,jdbcType=VARCHAR}, #{snapshotLocation,jdbcType=VARCHAR}, #{videoLocation,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{updateBy,jdbcType=VARCHAR}, #{validateTime,jdbcType=DOUBLE},#{clickNum},#{inputNum},#{consumeTime,jdbcType=DOUBLE},#{executeHost,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.cmit.testing.entity.TestCaseReport" >
    insert into testcase_report
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="testcastId != null" >
        testcast_id,
      </if>
      <if test="oldTestcaseId != null" >
        old_testcase_id,
      </if>
      <if test="phoneNum != null" >
        phone_num,
      </if>
      <if test="province != null" >
        province,
      </if>
      <if test="excuteNum != null" >
        excute_num,
      </if>
      <if test="log != null" >
        log,
      </if>
      <if test="isFinish != null" >
        is_finish,
      </if>
      <if test="excuteResult != null" >
        excute_result,
      </if>
      <if test="passStatus != null" >
        pass_status,
      </if>
      <if test="defectDescription != null" >
        defect_description,
      </if>
      <if test="snapshotLocation != null" >
        snapshot_location,
      </if>
      <if test="videoLocation != null" >
        video_location,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createBy != null" >
        create_by,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="updateBy != null" >
        update_by,
      </if>
      <if test="validateTime != null" >
        validate_time,
      </if>
      <if test="executeHost!=null" >
        execute_host,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="testcastId != null" >
        #{testcastId,jdbcType=INTEGER},
      </if>
      <if test="oldTestcaseId != null" >
        #{oldTestcaseId,jdbcType=INTEGER},
      </if>
      <if test="phoneNum != null" >
        #{phoneNum,jdbcType=VARCHAR},
      </if>
      <if test="province != null" >
        #{province,jdbcType=VARCHAR},
      </if>
      <if test="excuteNum != null" >
        #{excuteNum,jdbcType=INTEGER},
      </if>
      <if test="log != null" >
        #{log,jdbcType=VARCHAR},
      </if>
      <if test="isFinish != null" >
        #{isFinish,jdbcType=INTEGER},
      </if>
      <if test="excuteResult != null" >
        #{excuteResult,jdbcType=INTEGER},
      </if>
      <if test="passStatus != null" >
        #{passStatus,jdbcType=INTEGER},
      </if>
      <if test="defectDescription != null" >
        #{defectDescription,jdbcType=VARCHAR},
      </if>
      <if test="snapshotLocation != null" >
        #{snapshotLocation,jdbcType=VARCHAR},
      </if>
      <if test="videoLocation != null" >
        #{videoLocation,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null" >
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null" >
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="validateTime != null" >
        #{validateTime,jdbcType=DOUBLE},
      </if>
      <if test="executeHost!=null" >
        #{executeHost,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cmit.testing.entity.TestCaseReport" >
    update testcase_report
    <set >
      <if test="testcastId != null" >
        testcast_id = #{testcastId,jdbcType=INTEGER},
      </if>
      <if test="oldTestcaseId != null" >
        old_testcase_id = #{oldTestcaseId,jdbcType=INTEGER},
      </if>
      <if test="phoneNum != null" >
        phone_num = #{phoneNum,jdbcType=VARCHAR},
      </if>
      <if test="province != null" >
        province = #{province,jdbcType=VARCHAR},
      </if>
      <if test="excuteNum != null" >
        excute_num = #{excuteNum,jdbcType=INTEGER},
      </if>
      <if test="log != null" >
        log = #{log,jdbcType=VARCHAR},
      </if>
      <if test="isFinish != null" >
        is_finish = #{isFinish,jdbcType=INTEGER},
      </if>
      <if test="excuteResult != null" >
        excute_result = #{excuteResult,jdbcType=INTEGER},
      </if>
      <if test="passStatus != null" >
        pass_status = #{passStatus,jdbcType=INTEGER},
      </if>
      <if test="defectDescription != null" >
        defect_description = #{defectDescription,jdbcType=VARCHAR},
      </if>
      <if test="snapshotLocation != null" >
        snapshot_location = #{snapshotLocation,jdbcType=VARCHAR},
      </if>
      <if test="videoLocation != null" >
        video_location = #{videoLocation,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null" >
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null" >
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="validateTime != null" >
        validate_time = #{validateTime,jdbcType=DOUBLE},
      </if>
      <if test="executeHost!=null" >
        execute_host = #{executeHost,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cmit.testing.entity.TestCaseReport" >
    update testcase_report
    set testcast_id = #{testcastId,jdbcType=INTEGER},
      old_testcase_id = #{oldTestcaseId,jdbcType=INTEGER},
      phone_num = #{phoneNum,jdbcType=VARCHAR},
      province = #{province,jdbcType=VARCHAR},
      excute_num = #{excuteNum,jdbcType=INTEGER},
      log = #{log,jdbcType=VARCHAR},
      is_finish = #{isFinish,jdbcType=INTEGER},
      excute_result = #{excuteResult,jdbcType=INTEGER},
      pass_status = #{passStatus,jdbcType=INTEGER},
      defect_description = #{defectDescription,jdbcType=VARCHAR},
      snapshot_location = #{snapshotLocation,jdbcType=VARCHAR},
      video_location = #{videoLocation,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      validate_time = #{validateTime,jdbcType=DOUBLE},
      click_Num=#{clickNum,jdbcType=INTEGER},input_Num=#{inputNum,jdbcType=INTEGER},
      consume_Time=#{consumeTime,jdbcType=DOUBLE},
      execute_host = #{executeHost,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--<select id="findPage" resultMap="BaseResultMap" parameterType="com.cmit.testing.entity.TestCaseReport" >
    select
    a.*,b.name AS testcastName ,c.name AS businessName
    from testcase_report a LEFT JOIN
    testcase b ON a.testcast_id = b.id LEFT JOIN
    business c ON b.business_id = c.id
    where 1=1
    <if test="businessName != null and businessName != ''" >
      AND c.name LIKE CONCAT('%', #{businessName},'%')
    </if>
    <if test="testcastName != null and testcastName != ''" >
      AND b.name LIKE CONCAT('%', #{testcastName},'%')
    </if>
    <if test="province != null and province !=''" >
      AND a.province LIKE CONCAT('%',#{province},'%')
    </if>
    <if test="excuteResult != null" >
      AND a.excute_result = #{excuteResult}
    </if>
    <if test="testcastId != null and testcastId !=''" >
      AND a.testcast_id = #{testcastId}
    </if>
    <if test="oldTestcaseId != null and oldTestcaseId !=''" >
      AND a.old_testcase_id = #{oldTestcaseId}
    </if>
    <if test="excuteNum != null and excuteNum !=''" >
      AND a.excute_num = #{excuteNum}
    </if>
  </select>-->
  <!--项目报告数据统计（projectnum：项目报告总数-->
  <select id="testcaseReportCount" resultType="java.util.Map">
    SELECT
    count(0) AS reportnum
    FROM
      testcase_report
  </select>

  <select id="getTestCaseReportByTestCaseIdAndExcuteResult" resultMap="BaseResultMap" >
  	select <include refid="Base_Column_List" /> from testcase_report 
  	where testcast_id = #{id} and excute_result = #{excuteResult}
  </select>

  <!--&lt;!&ndash;用例报告&ndash;&gt;s
  <select id="findPage" resultType="com.cmit.testing.entity.TestCaseReport" parameterType="com.cmit.testing.entity.TestCaseReport" >
    SELECT
    b.id As id,
    h.id AS testcastId,
    b.province AS province,
    b.log AS log,
    b.is_finish AS isFinish,
    b.excute_result AS excuteResult,
    b.pass_status AS passStatus,
    b.defect_description AS defectDescription,
    b.snapshot_location AS snapshotLocation,
    b.video_location AS videoLocation,
    b.create_time AS createTime,
    b.create_by AS createBy,
    b.update_time AS updateTime,
    b.update_by AS updateBy,
    b.phone_num AS phoneNum,
    e. NAME AS scriptName,
    d.`name` AS businessName,
    a.`name` AS testcastName,
    a.excute_num  AS excuteNum
    FROM
    testcase a JOIN
    (SELECT * FROM testcase WHERE
    old_testcase_id = 0
    <if test="testcastName != null and testcastName != ''" >
        AND name LIKE CONCAT('%', #{testcastName},'%')
      </if>
    ) h ON a.old_testcase_id = h.id

     JOIN testcase_report b ON a.id = b.testcast_id
     JOIN business d ON d.id = h.business_id
     JOIN model_script e ON e.id = a.script_id
    WHERE a.sys_task_id IS NULL
    <if test="businessName != null and businessName != ''" >
      AND d.name LIKE CONCAT('%', #{businessName},'%')
    </if>

    <if test="province != null and province !=''" >
      AND b.province LIKE CONCAT('%',#{province},'%')
    </if>

    <if test="excuteResult != null" >
      AND b.excute_result = #{excuteResult}
    </if>
    <if test="testcastId != null and testcastId !=''" >
      AND a.old_testcase_id = #{testcastId}
    </if>
    <if test="excuteNum != null and excuteNum !=''" >
      AND a.excute_num = #{excuteNum}
    </if>
    <if test="phoneNum != null and phoneNum !=''" >
      AND b.phone_num LIKE CONCAT('%',#{phoneNum},'%')
    </if>
   </select>-->

  <!--用例报告-->
  <select id="findPage" resultType="com.cmit.testing.entity.vo.TestCaseReportVO" parameterType="com.cmit.testing.entity.vo.TestCaseReportVO" >
    SELECT
    p.name as projectName,
    b.id As testCaseReportId,
    h.id AS testcastId,
    b.province AS province,
    b.log AS log,
    b.execute_host as executeHost,
    b.is_finish AS isFinish,
    b.excute_result AS excuteResult,
    b.pass_status AS passStatus,
    b.defect_description AS defectDescription,
    b.snapshot_location AS snapshotLocation,
    b.video_location AS videoLocation,
    b.create_time AS excuteTime,
    b.phone_num AS phoneNum,
    e. NAME AS scriptName,
    d.`name` AS businessName,
    a.`name` AS testcastName,
    a.excute_num  AS excuteNum,
    'web' AS type
    FROM
    testcase a JOIN
    (SELECT * FROM testcase WHERE
    old_testcase_id = 0
    <if test="testcastName != null and testcastName != ''" >
      AND name LIKE CONCAT('%', #{testcastName},'%')
    </if>
    ) h ON a.old_testcase_id = h.id

    JOIN testcase_report b ON a.id = b.testcast_id
    JOIN business d ON d.id = h.business_id
    JOIN model_script e ON e.id = a.script_id
    join project p on d.project_id = p.id
    WHERE a.sys_task_id IS NULL
    <if test="businessName != null and businessName != ''" >
      AND d.name LIKE CONCAT('%', #{businessName},'%')
    </if>
    <if test="projectName != null and projectName != ''" >
      AND p.name LIKE CONCAT('%', #{projectName},'%')
    </if>
    <if test="province != null and province !=''" >
      AND b.province LIKE CONCAT('%',#{province},'%')
    </if>

    <if test="excuteResult != null" >
      AND b.excute_result = #{excuteResult}
    </if>
    <if test="surveyTaskId != null and surveyTaskId !=''" >
      AND a.survey_task_id = #{surveyTaskId}
    </if>
    <if test="surveyTaskId == null or surveyTaskId ==''" >
      AND a.survey_task_id  IS NULL
    </if>
    <if test="testcastId != null and testcastId !=''" >
      AND a.old_testcase_id = #{testcastId}
    </if>
    <if test="testcastIds != null and testcastIds.size >0" >
      AND a.old_testcase_id IN
      <foreach close=")" collection="testcastIds" item="testcastId" open="(" separator=",">
        #{testcastId,jdbcType=INTEGER}
      </foreach>
    </if>

    <if test="excuteNum != null and excuteNum !=''" >
      AND a.excute_num = #{excuteNum}
    </if>
    <if test="phoneNum != null and phoneNum !=''" >
      AND b.phone_num LIKE CONCAT('%',#{phoneNum},'%')
    </if>

    <if test="webTestCaseReportIds != null and webTestCaseReportIds.size >0" >
      AND b.id IN
      <foreach close=")" collection="webTestCaseReportIds" item="testCaseReportId" open="(" separator=",">
        #{testCaseReportId,jdbcType=INTEGER}
      </foreach>
    </if>

  </select>

  <select id="getIdsByTestCaseIds" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from testcase_report
    WHERE testcast_id IN
    <foreach close=")" collection="ids" item="id" open="(" separator=",">
      #{id,jdbcType=INTEGER}
    </foreach>
  </select>

  <select id="getTestCaseReportByCaseId" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from testcase_report where testcast_id = #{id}
    <if test="status != null">
      and excute_result = #{status}
    </if>
  </select>

  <!--获取执行通过的手机号码-->
  <select id="getWebPhoneNumList" resultType="java.util.List">
    SELECT phone_num
    FROM testcase_report
    WHERE testcast_id = #{caseId}
      <if test="executeStatus != null">
        AND excute_result = #{executeStatus}
      </if>
  </select>

  <delete id="deleteByTestcastIds" parameterType="java.lang.Integer">
    delete from testcase_report
    where testcast_id IN
    <foreach close=")" collection="testcastIds" item="testcastId" open="(" separator=",">
      #{testcastId,jdbcType=INTEGER}
    </foreach>
  </delete>

  <delete id="deleteByIds" parameterType="java.lang.Integer">
    delete from testcase_report
    where id IN
    <foreach close=")" collection="ids" item="id" open="(" separator=",">
      #{id,jdbcType=INTEGER}
    </foreach>
  </delete>

  <!--查询省份-->
  <select id="getProvinceByTestcaseIds" resultType="java.lang.String" parameterType="java.util.List">
    select DISTINCT(province)
    from testcase_report tr JOIN testcase tc on tr.testcast_id = tc.id
    WHERE  tc.old_testcase_id IN
    <foreach close=")" collection="testcastIds" item="testcastId" open="(" separator=",">
      #{testcastId,jdbcType=INTEGER}
    </foreach>
  </select>

  <!--查询用例的成功数和失败数-->
  <select id="getSuccessNumAndFailureNumByTestcastId" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    select
      count( IF ( excute_result = 0, TRUE, NULL ) ) AS successNum,
      count( IF ( excute_result = 1, TRUE, NULL ) ) AS failureNum
    from testcase_report
    WHERE testcast_id = #{testcastId}
  </select>


  <select id="getDefectsCount" resultType="java.lang.Integer">
    SELECT COUNT(1) FROM testcase_report tr WHERE !ISNULL(tr.defect_description) AND tr.defect_description != ''
  </select>

  <select id="getTestCaseReportByTestCaseIdAndPhone" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from testcase_report where testcast_id = #{id}
    <if test="phoneNum != null">
      and phone_num = #{phoneNum}
    </if>
  </select>

  <select id="getTestCaseReportByFewDays" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    FROM testcase_report WHERE #{date } >= DATE_ADD(create_time,INTERVAL #{day } DAY)
  </select>

  <select id="getCaseReportByCaseIdAndExcuteNum" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List_b"/> FROM testcase_report b,
    (SELECT a.province,case when max_n >= #{number} then #{number} when max_n &lt; #{number} then max_n end as ex_n from (
    select province, max(excute_num ) max_n FROM testcase_report a where a.old_testcase_id = #{id} GROUP BY a.province
    ) a) a  WHERE b.excute_num = a.ex_n and b.old_testcase_id = #{id} and b.province = a.province
  </select>

  <select id="getTestCaseReportByTestCaseId" resultMap="BaseResultMap">
  SELECT tr.*,t.name as testcast_name FROM testcase_report tr LEFT JOIN testcase t ON
  tr.testcast_id =t.id WHERE tr.testcast_id = #{id }
  </select>

  <!-- 根据原用例id和省份获取最新的用例报告,在testcase_report加上old_testcase_id字段后，该sql暂停使用 -->
  <!-- <select id="getTestCaseReportByOldTestcaseIdAndProvince" resultMap="BaseResultMap" >
	SELECT <include refid="Base_Column_List" /> from testcase_report t where t.province = #{province} and exists (
		select t2.id from testcase t2 where t2.old_testcase_id = #{oldTestcaseId} and t.testcast_id = t2.id
	) order by t.excute_num desc limit 1
  </select> -->
  
  <!-- 根据原用例id和省份获取最新的用例报告 -->
  <select id="getTestCaseReportByOldTestcaseIdAndProvince" resultMap="BaseResultMap" >
	select <include refid="Base_Column_List" /> from testcase_report t 
	where t.province = #{province} and t.old_testcase_id = #{oldTestcaseId} order by t.excute_num desc limit 1;
  </select>

  <select id="getTestCaseReport4Zip" resultType="com.cmit.testing.entity.vo.TestCaseReportVO" parameterType="com.cmit.testing.entity.vo.TestCaseReportVO">
    SELECT
    p.name as projectName,
    h.serial_number as serialNumber,
    b.id As testCaseReportId,
    h.id AS testcastId,
    b.province AS province,
    b.log AS log,
    b.execute_host as executeHost,
    b.is_finish AS isFinish,
    b.excute_result AS excuteResult,
    b.pass_status AS passStatus,
    b.defect_description AS defectDescription,
    b.snapshot_location AS snapshotLocation,
    b.video_location AS videoLocation,
    b.create_time AS excuteTime,
    b.phone_num AS phoneNum,
    e. NAME AS scriptName,
    d.`name` AS businessName,
    a.`name` AS testcastName,
    a.excute_num  AS excuteNum,
    'web' AS type
    FROM
    testcase a JOIN
    (SELECT * FROM testcase WHERE
    old_testcase_id = 0
    <if test="testcastName != null and testcastName != ''" >
      AND name LIKE CONCAT('%', #{testcastName},'%')
    </if>
    ) h ON a.old_testcase_id = h.id

    JOIN testcase_report b ON a.id = b.testcast_id
    JOIN business d ON d.id = h.business_id
    JOIN model_script e ON e.id = a.script_id
    join project p on d.project_id = p.id
    WHERE a.sys_task_id IS NULL
    <if test="businessName != null and businessName != ''" >
      AND d.name LIKE CONCAT('%', #{businessName},'%')
    </if>
    <if test="projectName != null and projectName != ''" >
      AND p.name LIKE CONCAT('%', #{projectName},'%')
    </if>
    <if test="province != null and province !=''" >
      AND b.province LIKE CONCAT('%',#{province},'%')
    </if>

    <if test="excuteResult != null" >
      AND b.excute_result = #{excuteResult}
    </if>
    <if test="surveyTaskId != null and surveyTaskId !=''" >
      AND a.survey_task_id = #{surveyTaskId}
    </if>
    <if test="surveyTaskId == null or surveyTaskId ==''" >
      AND a.survey_task_id  IS NULL
    </if>
    <if test="testcastId != null and testcastId !=''" >
      AND a.old_testcase_id = #{testcastId}
    </if>
    <if test="testcastIds != null and testcastIds.size >0" >
      AND a.old_testcase_id IN
      <foreach close=")" collection="testcastIds" item="testcastId" open="(" separator=",">
        #{testcastId,jdbcType=INTEGER}
      </foreach>
    </if>

    <if test="excuteNum != null and excuteNum !=''" >
      AND a.excute_num = #{excuteNum}
    </if>
    <if test="phoneNum != null and phoneNum !=''" >
      AND b.phone_num LIKE CONCAT('%',#{phoneNum},'%')
    </if>
    <if test="snapshotLocation != null and snapshotLocation !=''" >
      AND b.snapshot_location is not null and b.snapshot_location != ''
    </if>

    <if test="webTestCaseReportIds != null and webTestCaseReportIds.size >0" >
      AND b.id IN
      <foreach close=")" collection="webTestCaseReportIds" item="testCaseReportId" open="(" separator=",">
        #{testCaseReportId,jdbcType=INTEGER}
      </foreach>
    </if>

  </select>




</mapper>