package com.cmit.testing.dao.app;

import com.cmit.testing.entity.app.AppScript;
import com.cmit.testing.entity.vo.AppScriptVO;
import com.cmit.testing.entity.vo.ScriptVO;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.util.List;

@Mapper
public interface AppScriptMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table app_script
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer scriptId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table app_script
     *
     * @mbggenerated
     */
    int insert(AppScript record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table app_script
     *
     * @mbggenerated
     */
    int insertSelective(AppScript record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table app_script
     *
     * @mbggenerated
     */
    AppScript selectByPrimaryKey(Integer scriptId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table app_script
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(AppScript record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table app_script
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(AppScript record);
    int selectincidencetById(Integer scriptId);

    /**
     * 校验脚本名称
     * @param scriptName
     * @return
     */
    int getCountByName(@Param("scriptId") String scriptId, @Param("scriptName") String scriptName);

    /**
     * 根据scriptId查询对应脚本的基本信息
     * @param scriptId
     * @return
     */
    AppScriptVO getScriptById(@Param("scriptId") Integer scriptId);
    /**
     * 批量查询
     * @param scriptIds
     * @return
     */
    List<AppScript> listByScriptIds(@Param("ids") List<Integer> scriptIds);

    /**
     * 批量删除
     * @param scriptIds
     * @return
     */
    int deleteByScriptIds(@Param("ids") List<Integer> scriptIds);

    /**
     * 根据业务ID查询所有的APP脚本
     * @param businessId
     * @return
     */
    List<AppScript> getAllByBusinessId(Integer businessId);

    /**
     * 条件查询脚本信息
     * @param as
     * @return
     */
    List<AppScript> selectByAppScript(AppScript as);

    /**
     * 根据脚本ID查询脚本相关的信息
     * @param scriptId
     * @return
     */
    ScriptVO getScriptInfoById(@Param("scriptId") Integer scriptId);

    Integer queryAppScriptCount();
    /**
     * 根据scriptId查询对应脚本的基本信息
     * @param scriptId
     * @return
     */
    AppScript selectScriptById(@Param("scriptId") Integer scriptId);
}